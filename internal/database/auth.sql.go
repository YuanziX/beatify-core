// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: auth.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkAuthExists = `-- name: CheckAuthExists :one
SELECT EXISTS(
    SELECT auth_id, user_email, auth_uuid FROM auth
    WHERE
        user_email = $1
        AND auth_uuid = $2
)
`

type CheckAuthExistsParams struct {
	UserEmail string
	AuthUuid  uuid.UUID
}

func (q *Queries) CheckAuthExists(ctx context.Context, arg CheckAuthExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkAuthExists, arg.UserEmail, arg.AuthUuid)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createAuth = `-- name: CreateAuth :one
INSERT INTO
    auth (user_email)
VALUES ($1)
    RETURNING auth_id, user_email, auth_uuid
`

func (q *Queries) CreateAuth(ctx context.Context, userEmail string) (Auth, error) {
	row := q.db.QueryRowContext(ctx, createAuth, userEmail)
	var i Auth
	err := row.Scan(&i.AuthID, &i.UserEmail, &i.AuthUuid)
	return i, err
}

const deleteAuth = `-- name: DeleteAuth :exec
DELETE FROM auth
WHERE
    user_email = $1
    AND auth_uuid = $2
`

type DeleteAuthParams struct {
	UserEmail string
	AuthUuid  uuid.UUID
}

func (q *Queries) DeleteAuth(ctx context.Context, arg DeleteAuthParams) error {
	_, err := q.db.ExecContext(ctx, deleteAuth, arg.UserEmail, arg.AuthUuid)
	return err
}
