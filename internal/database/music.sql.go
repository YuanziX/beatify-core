// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: music.sql

package database

import (
	"context"
)

const createMusic = `-- name: CreateMusic :one
INSERT INTO music (title, artist, album, location, year)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, artist, album, location, year
`

type CreateMusicParams struct {
	Title    string
	Artist   string
	Album    string
	Location string
	Year     int32
}

func (q *Queries) CreateMusic(ctx context.Context, arg CreateMusicParams) (Music, error) {
	row := q.db.QueryRowContext(ctx, createMusic,
		arg.Title,
		arg.Artist,
		arg.Album,
		arg.Location,
		arg.Year,
	)
	var i Music
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Album,
		&i.Location,
		&i.Year,
	)
	return i, err
}

const getMusicByID = `-- name: GetMusicByID :one
SELECT id, title, artist, album, location, year FROM music WHERE id = $1
`

func (q *Queries) GetMusicByID(ctx context.Context, id int32) (Music, error) {
	row := q.db.QueryRowContext(ctx, getMusicByID, id)
	var i Music
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Album,
		&i.Location,
		&i.Year,
	)
	return i, err
}

const getMusicList = `-- name: GetMusicList :many
SELECT id, title, artist, album, location, year
FROM music
LIMIT $1
OFFSET $2
`

type GetMusicListParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetMusicList(ctx context.Context, arg GetMusicListParams) ([]Music, error) {
	rows, err := q.db.QueryContext(ctx, getMusicList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Music
	for rows.Next() {
		var i Music
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artist,
			&i.Album,
			&i.Location,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
